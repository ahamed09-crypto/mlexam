13. Demonstrate the use of Fuzzy C-Means Clustering.
8.	Red "X" markers indicate cluster centroids.
Installation (If required)
pip install scikit-fuzzy numpy matplotlib

Python Code for FCM
import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt
# Generate synthetic data (2 clusters)
np.random.seed(42)
cluster1 = np.random.normal(loc=[2, 2], scale=0.5, size=(50, 2))
cluster2 = np.random.normal(loc=[6, 6], scale=0.5, size=(50, 2))

# Combine data into a single dataset
data = np.vstack((cluster1, cluster2)).T  # Transpose to match FCM input format

# Number of clusters
num_clusters = 2

# Apply Fuzzy C-Means
cntr, u, _, _, _, _, _ = fuzz.cmeans(data, num_clusters, m=2, error=0.005, maxiter=1000)

# Get final cluster assignments
cluster_membership = np.argmax(u, axis=0)

# Plot results
plt.figure(figsize=(8, 6))
for i in range(num_clusters):
    plt.scatter(data[0, cluster_membership == i], data[1, cluster_membership == i], label=f'Cluster {i+1}')
plt.scatter(cntr[:, 0], cntr[:, 1], c='red', marker='X', s=200, label='Centroids')
plt.legend()
plt.title('Fuzzy C-Means Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

Output:
