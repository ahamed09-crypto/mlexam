12. Implement the K-means algorithm and apply it to the data you selected. Evaluate performance by measuring the sum of the Euclidean distance of each example from its class center. Test the performance of the algorithm as a function of the parameters K.
Python code
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
from sklearn.metrics import pairwise_distances_argmin_min

# Generate synthetic dataset
np.random.seed(42)
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=1.0, random_state=42)

# Function to compute sum of Euclidean distances from cluster centers
def evaluate_kmeans(X, k_values):
    distortions = []
    for k in k_values:
        kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
        kmeans.fit(X)
        cluster_centers = kmeans.cluster_centers_
        labels = kmeans.labels_
        
        # Compute sum of Euclidean distances
        _, distances = pairwise_distances_argmin_min(X, cluster_centers)
        total_distance = np.sum(distances)
        distortions.append(total_distance)
        
        print(f'K={k}, Total Distance: {total_distance:.4f}')
    
    return distortions

# Test K values from 1 to 10
k_values = range(1, 11)
distortions = evaluate_kmeans(X, k_values)

# Plot the Elbow Method
plt.figure(figsize=(8, 5))
plt.plot(k_values, distortions, marker='o', linestyle='--')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Sum of Euclidean Distances')
plt.title('Elbow Method for Optimal K')
plt.show()

Output:
