Program4
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Load the Iris dataset
data = load_iris()
X = data.data
y = data.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 1: Train a basic Decision Tree model
default_tree = DecisionTreeClassifier(random_state=42)
default_tree.fit(X_train, y_train)
plt.figure(figsize=(12, 8))
plot_tree(default_tree, feature_names=data.feature_names, class_names=data.target_names, filled=True)
plt.title("Basic Decision Tree")
plt.show()

# Make predictions and evaluate the model
default_predictions = default_tree.predict(X_test)
default_accuracy = accuracy_score(y_test, default_predictions)
print("Default Decision Tree Accuracy:", default_accuracy)
print("\nClassification Report for Basic Model:\n")
print(classification_report(y_test, default_predictions))

# Step 2: Hyperparameter tuning using GridSearchCV
param_grid = {
    'criterion': ['gini', 'entropy'],
    'max_depth': [None, 2, 4, 6, 8, 10],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Best parameters and model
best_params = grid_search.best_params_
best_tree = grid_search.best_estimator_

# Make predictions with the tuned model
tuned_predictions = best_tree.predict(X_test)
tuned_accuracy = accuracy_score(y_test, tuned_predictions)

print("\nBest Parameters:", best_params)
print("Tuned Decision Tree Accuracy:", tuned_accuracy)

# Step 3: Visualize the Decision Tree
plt.figure(figsize=(12, 8))
plot_tree(best_tree, feature_names=data.feature_names, class_names=data.target_names, filled=True)
plt.title("Tuned Decision Tree")
plt.show()

# Step 4: Detailed evaluation
print("\nClassification Report for Tuned Model:\n")
print(classification_report(y_test, tuned_predictions))


